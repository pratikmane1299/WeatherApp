{"version":3,"sources":["components/WeatherForm.js","components/WeatherCard.js","App.js","index.js"],"names":["WeatherForm","city","loading","handleChange","handleSubmit","className","onSubmit","type","name","value","onChange","WeatherCard","weather","applicable_date","src","weather_state_abbr","alt","weather_state_name","humidity","min_temp","toFixed","max_temp","App","useState","setCity","weatherInfo","setWeatherInfo","setLoading","error","setError","e","a","preventDefault","fetch","locationRes","json","locationJson","location","woeid","weatherRes","weatherJson","consolidated_weather","message","target","map","key","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAoBeA,MAlBf,YAAqE,IAA9CC,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,aAClD,OACE,0BAAMC,UAAU,OAAOC,SAAUF,GAC/B,2BAAOC,UAAU,cAAjB,QACA,2BACEE,KAAK,OACLC,KAAK,OACLH,UAAU,QACVI,MAAOR,EACPS,SAAUP,IAEZ,4BAAQE,UAAU,UACdH,EAA0B,2BAAhB,iBCSLS,MArBf,YAAmC,IAAZC,EAAW,EAAXA,QACrB,OACE,yBAAKP,UAAU,gBACb,4BAAKO,EAAQC,iBACb,yBACEC,IAAG,yDAAoDF,EAAQG,mBAA5D,QACHC,IAAKJ,EAAQK,qBAEf,2BACE,2CADF,IACyB,8BAAOL,EAAQM,SAAf,UAEzB,2BACE,sCADF,IACoB,8BAAON,EAAQO,SAASC,QAAQ,GAAhC,UAEpB,2BACE,sCADF,IACoB,8BAAOR,EAAQS,SAASD,QAAQ,GAAhC,YCqDXE,MAhEf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNtB,EADM,KACAuB,EADA,OAEyBD,mBAAS,IAFlC,mBAENE,EAFM,KAEOC,EAFP,OAGiBH,oBAAS,GAH1B,mBAGNrB,EAHM,KAGGyB,EAHH,OAIaJ,mBAAS,IAJtB,mBAINK,EAJM,KAICC,EAJD,KAUPzB,EAAY,uCAAG,WAAO0B,GAAP,uBAAAC,EAAA,yDACnBD,EAAEE,iBACW,KAAT/B,EAFe,wDAInB0B,GAAW,GAJQ,SAKOM,MAAM,8FAAD,OAA+FhC,IAL3G,cAKbiC,EALa,gBAMQA,EAAYC,OANpB,UAMbC,EANa,SAObC,EAAWD,EAAa,IAPX,kCASQH,MAAM,gFAAD,OAAiFI,EAASC,QATvG,eASXC,EATW,iBAUSA,EAAWJ,OAVpB,SAUXK,EAVW,SAafX,EAAS,MACTH,EAAec,EAAYC,sBAC3BjB,EAAQ,MAERK,EAAS,CAAEa,QAAS,iCACpBlB,EAAQ,IACRE,EAAe,KAnBA,wBAsBjBG,EAAS,CAAEa,QAAS,uBACpBlB,EAAQ,IACRE,EAAe,IAxBE,QA0BnBC,GAAW,GA1BQ,4CAAH,sDA6BlB,OACE,8BACE,2CACA,kBAAC,EAAD,CACE1B,KAAMA,EACNC,QAASA,EACTC,aAvCe,SAAC2B,GACpBN,EAAQM,EAAEa,OAAOlC,QAuCbL,aAAcA,IAEfwB,GAAS,0BAAMvB,UAAU,iBAAiBuB,EAAMc,UAE9CxC,GACC,yBAAKG,UAAU,mBAEboB,EAAYmB,KAAI,SAAAhC,GAAO,OACrB,kBAAC,EAAD,CAAaiC,IAAKjC,EAAQkC,GAAIlC,QAASA,UCvDrDmC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.30abe972.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction WeatherForm({ city, loading, handleChange, handleSubmit }) {\r\n  return (\r\n    <form className=\"form\" onSubmit={handleSubmit}>\r\n      <label className=\"form-label\">City</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"city\"\r\n        className=\"input\"\r\n        value={city}\r\n        onChange={handleChange}\r\n      />\r\n      <button className=\"button\">\r\n        {!loading ? \"Get Weather\" : \"Fetching weather data...\"}\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default WeatherForm;\r\n","import React from \"react\";\r\n\r\nfunction WeatherCard({ weather }) {\r\n  return (\r\n    <div className=\"weather-card\">\r\n      <h4>{weather.applicable_date}</h4>\r\n      <img\r\n        src={`https://www.metaweather.com/static/img/weather/${weather.weather_state_abbr}.svg`}\r\n        alt={weather.weather_state_name}\r\n      />\r\n      <p>\r\n        <span>Humidity:</span> <span>{weather.humidity}°C</span>\r\n      </p>\r\n      <p>\r\n        <span>Min:</span> <span>{weather.min_temp.toFixed(2)}°C</span>\r\n      </p>\r\n      <p>\r\n        <span>Max:</span> <span>{weather.max_temp.toFixed(2)}°C</span>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherCard;\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nimport WeatherForm from './components/WeatherForm';\r\nimport WeatherCard from './components/WeatherCard';\r\n\r\nfunction App() {\r\n  const [city, setCity] = useState('');\r\n  const [weatherInfo, setWeatherInfo] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState({});\r\n\r\n  const handleChange = (e) => {\r\n    setCity(e.target.value)\r\n  }\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (city === '') { return }\r\n    \r\n    setLoading(true);\r\n    const locationRes = await fetch(`https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api/location/search/?query=${city}`);\r\n    const locationJson = await locationRes.json();\r\n    const location = locationJson[0];\r\n    if (location) {\r\n      const weatherRes = await fetch(`https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api/location/${location.woeid}`);\r\n      const weatherJson = await weatherRes.json();\r\n\r\n      if (weatherJson) {\r\n        setError(null);\r\n        setWeatherInfo(weatherJson.consolidated_weather);\r\n        setCity('');\r\n      } else {\r\n        setError({ message: 'Could not fetch weather data'});\r\n        setCity('');\r\n        setWeatherInfo([]);\r\n      }      \r\n    } else {\r\n      setError({ message: 'Location Not Found'});\r\n      setCity('');\r\n      setWeatherInfo([]);\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  return (\r\n    <main>\r\n      <h1>Weather App</h1>\r\n      <WeatherForm \r\n        city={city} \r\n        loading={loading} \r\n        handleChange={handleChange} \r\n        handleSubmit={handleSubmit} \r\n      />\r\n      {error && <span className=\"error-message\">{error.message}</span>}\r\n      {\r\n        !loading && (\r\n          <div className=\"weather-wrapper\">\r\n          {\r\n            weatherInfo.map(weather => (\r\n              <WeatherCard key={weather.id} weather={weather} />\r\n            ))\r\n          }\r\n          </div>\r\n        )\r\n      }\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}